- implement fitness function plot
- store best for each generation separately
- make values close to 0 = 0. (lowest 5% or 10%)
- try with 5 agents
- try random vectors to see if they produce order
- add the f = fitness + a*norm(c_values) version and test for different values of a a
- add sectors to verify movement/encourage exploration
- limit orientation difference
    - count occurrences of large orientation differences. if more than x percent of cases, add the percentage to the fitness (80% = 80)
    - if too many large orientation diffrences, return 1000 for the fitness
    - use NGA-II (NSGA-II?) to explore the pareto front
- use L1 norm on the c_values-vector for the simulation and L0 norm on the c_values for eval (f(L1(c_values)) + aL0(c_values))
    - possiblytry L0, L1 norm for the c-values minimization
    - possibly try a*L0*L1 norm for the c_values minimization
- try with events 

13.11.:
- use L1 norm instead of L0 to minimise magnitude of the c-values
- set cs to 0 if the value is smaller than 1% of the domain (1% of 10 = 0.1)
- mutate value based on random value (90% prob for noise, 5% prob for setting to 0, 5% prob for setting to a random new value within the bounds)
- start with very sparse vectors (only 5% or 10% with values)

15.11:
- add noise to existing model
- set speed to 0.1 (needs longer runs)
- try with the flipping prevention

- also implement the active-elastic approach

eval:
- pca
- hierarchical clustering

29.11.:
- pursue AE model adaptation
    - use the kernel function from the other model as alpha or beta
- also pursue function model:
    - try using bins instead of continuous functions, i.e. a grid/cube with a coefficient for every bin (orientation diff, distance, 
        bearing diff as the axes) and then just look up the coefficient that is suitable for the neighbour
    - use a combined function for all three axes if not using bins
    - allow the model to pick from a variety of functions as well as the function parameters (e.g. mu and sigma for Gaussian)
    - only use positive values instead of a neg-pos range
- general:
    - try using only positive values
    - try using 5 agents

- tasks:
    - ask Eliseo for paper with implementation of AE 
    - link overleaf to uni 
    - create new overleaf project with GECCO template (https://gecco-2025.sigevo.org/Paper-Submission-Instructions)

03.12.:
- try evolving the weights for a neural network coming up with the coefficient for every individual (i.e. feeding od, dist and bearing to a NN and getting back the coefficient)
- try a probability distribution instead
- try subsampling for larger agent populations (e.g. k=10, select randomly/preferentially by relationship etc.)